{"version":3,"sources":["webpack:///js/bundle.js","webpack:///webpack/bootstrap 1b1a841b82c49e236033","webpack:///./src/app.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","main","navigator","geolocation","watchId","watchPosition","getWeather","geoError","geoOptions","errorMsg","position","lat","coords","latitude","lon","longitude","url","baseUrl","apiKey","xhr","XMLHttpRequest","open","responseType","onreadystatechange","displayWeather","response","send","tempKelvin","temp","city","name","country","sys","condDesc","weather","icon","updateLocation","updateTemp","convertTemp","updateCond","updateIcon","document","getElementById","textContent","toString","degSign","tempUnit","elem","src","baseIconUrl","kelvinToFahrenheit","tempK","Math","round","kelvinToCelsius","toggleUnits","msg","alert","enableHighAccuracy","maximumAge","timeout","addEventListener","window","onload"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,GElCvB,QAAAQ,KAEA,MAAAC,WAAAC,iBAKAC,EAAAF,UAAAC,YAAAE,cAAAC,EAAAC,EAAAC,QAJAC,GAAA,qDAOA,QAAAF,KACAE,EAAA,uCASA,QAAAH,GAAAI,GAEA,GAAAC,GAAAD,EAAAE,OAAAC,SACAC,EAAAJ,EAAAE,OAAAG,UACAC,EAAAC,EAAA,OAAAN,EAAA,QAAAG,EAAA,UAAAI,EAEAC,EAAA,GAAAC,eACA,OAAAD,IAIAA,EAAAE,KAAA,MAAAL,GAAA,GACAG,EAAAG,aAAA,OACAH,EAAAI,mBAAA,WACAC,EAAAL,EAAAM,eAEAN,GAAAO,YARAjB,GAAA,yCA+BA,QAAAe,GAAAC,GACA,UAAAA,EAAA,CAIAE,EAAAF,EAAAxB,KAAA2B,IACA,IAAAC,GAAAJ,EAAAK,KACAC,EAAAN,EAAAO,IAAAD,QACAE,EAAAR,EAAAS,QAAA,GAAAjC,KACAkC,EAAAV,EAAAS,QAAA,GAAAC,IAEAC,GAAAP,EAAAE,GACAM,EAAAC,EAAAX,IACAY,EAAAN,GACAO,EAAAL,IAEA,QAAAC,GAAAP,EAAAE,GACAU,SAAAC,eAAA,YACAC,YAAAd,EAAA,KAAAE,EAEA,QAAAM,GAAAT,GACAa,SAAAC,eAAA,QACAC,YAAAf,EAAAgB,WAAA,IAAAC,EAAA,IAAAC,EAEA,QAAAP,GAAAN,GACAQ,SAAAC,eAAA,QACAC,YAAAV,EAEA,QAAAO,GAAAL,GACA,GAAAY,GAAAN,SAAAC,eAAA,YACAK,GAAAC,IAAA,GAAAC,EAAAd,EAAA,OAGA,QAAAe,GAAAC,GAGA,MAAAC,MAAAC,MAAA,MAAAF,EAAA,cAGA,QAAAG,GAAAH,GAGA,MAAAC,MAAAC,MAAA,IAAAF,EAAA,YAGA,QAAAI,KACA,MAAAT,GACAA,EAAA,IACAR,EAAAgB,IAGAR,EAAA,IACAR,EAAAY,GAEAb,EAAAC,EAAAX,IAGA,QAAAlB,GAAA+C,GACAC,MAAAD,GA9HA,GAIA7B,GAJAT,EAAA,mCACAD,EAAA,kDACAgC,EAAA,mCACAJ,EAAA,IAEAC,EAAA,IACAR,EAAAY,EACA9C,EAAA,EAgBAI,GACAkD,oBAAA,EACAC,WAAA,EACAC,QAAA,IAuGAnB,UAAAC,eAAA,QAAAmB,iBAAA,QAAAN,GAAA,GACAO,OAAAC,OAAA9D","file":"./js/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t// Global app data\n\tvar apiKey = 'ffceec59df88c4336a45c093deedd062';\n\tvar baseUrl = 'http://api.openweathermap.org/data/2.5/weather?';\n\tvar baseIconUrl = 'http://openweathermap.org/img/w/';\n\tvar degSign = '\\u00B0';\n\tvar tempKelvin; // inital value retrieved from openweather\n\tvar tempUnit = 'F';\n\tvar convertTemp = kelvinToFahrenheit;\n\tvar watchId = 0;\n\t// App entry point\n\tfunction main() {\n\t    // Verify browser support\n\t    if (!navigator.geolocation) {\n\t        errorMsg(\"Error: Geolocation not supported by your browser.\");\n\t        return;\n\t    }\n\t    // Add event listeners on position change\n\t    watchId = navigator.geolocation.watchPosition(getWeather, geoError, geoOptions);\n\t}\n\t// watchPosition on error callback\n\tfunction geoError() {\n\t    errorMsg(\"Error: Unable to retrieve position.\");\n\t}\n\t// watchPosition options \n\tvar geoOptions = {\n\t    enableHighAccuracy: false,\n\t    maximumAge: 0,\n\t    timeout: 30000\n\t};\n\t// Get weather for current location\n\tfunction getWeather(position) {\n\t    // Build URL for weather request\n\t    var lat = position.coords.latitude;\n\t    var lon = position.coords.longitude;\n\t    var url = baseUrl + \"lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + apiKey;\n\t    // Create and issue request for weather data\n\t    var xhr = new XMLHttpRequest();\n\t    if (!xhr) {\n\t        errorMsg('Error: Cannot create XMLHttp instance');\n\t        return;\n\t    }\n\t    xhr.open('GET', url, true);\n\t    xhr.responseType = 'json';\n\t    xhr.onreadystatechange = function () {\n\t        displayWeather(xhr.response);\n\t    };\n\t    xhr.send();\n\t}\n\t// Response handler\n\tfunction handleXhrResponse(xhr) {\n\t    // Check that request is completed\n\t    if (xhr.readyState != 4) {\n\t        // do nothing if request is incomplete\n\t        return;\n\t    }\n\t    // Check for null response from server\n\t    if (xhr.response === null) {\n\t        errorMsg('Error: no response from server');\n\t        return;\n\t    }\n\t    // Check for error status\n\t    if (xhr.status != 200) {\n\t        errorMsg(\"Error: status \" + xhr.status);\n\t        return;\n\t    }\n\t    // If no errors, display weather data\n\t    displayWeather(xhr.response);\n\t}\n\t// Update display of current weather\n\tfunction displayWeather(response) {\n\t    if (response === null) {\n\t        return; // if response is null, do nothing\n\t    }\n\t    // Save inital Kelvin temperature for toggling unit conversions\n\t    tempKelvin = response.main.temp;\n\t    var city = response.name, // city name\n\t    country = response.sys.country, // country name         \n\t    condDesc = response.weather[0].main, // weather description\n\t    icon = response.weather[0].icon;\n\t    // Update weather display\n\t    updateLocation(city, country);\n\t    updateTemp(convertTemp(tempKelvin));\n\t    updateCond(condDesc);\n\t    updateIcon(icon);\n\t}\n\tfunction updateLocation(city, country) {\n\t    document.getElementById('location')\n\t        .textContent = city + \", \" + country;\n\t}\n\tfunction updateTemp(temp) {\n\t    document.getElementById('temp')\n\t        .textContent = temp.toString() + \" \" + degSign + \" \" + tempUnit;\n\t}\n\tfunction updateCond(condDesc) {\n\t    document.getElementById('cond')\n\t        .textContent = condDesc;\n\t}\n\tfunction updateIcon(icon) {\n\t    var elem = document.getElementById('cond-icon');\n\t    elem.src = \"\" + baseIconUrl + icon + \".png\";\n\t}\n\t// Convert temperature in Kelvins to Degrees Fahrenheit\n\tfunction kelvinToFahrenheit(tempK) {\n\t    // Tf = Tk x 9/5 - 459.67\n\t    // Rounds result to one decimal place\n\t    return Math.round((tempK * 9 / 5 - 459.67) * 10) / 10;\n\t}\n\t// Convert temperature in Kelvins to Degrees Celsius\n\tfunction kelvinToCelsius(tempK) {\n\t    // Tc = Tk - 273.15\n\t    // Rounds result to one decimal place\n\t    return Math.round((tempK - 273.15) * 10) / 10;\n\t}\n\t// Toggle between Fahrenheit or Celsius units\n\tfunction toggleUnits() {\n\t    if (tempUnit === 'F') {\n\t        tempUnit = 'C';\n\t        convertTemp = kelvinToCelsius;\n\t    }\n\t    else {\n\t        tempUnit = 'F';\n\t        convertTemp = kelvinToFahrenheit;\n\t    }\n\t    updateTemp(convertTemp(tempKelvin));\n\t}\n\t// Display error message\n\tfunction errorMsg(msg) {\n\t    alert(msg);\n\t}\n\t// Register event listeners and Define entry\n\tdocument.getElementById('temp').addEventListener('click', toggleUnits, false);\n\twindow.onload = main;\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// js/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1b1a841b82c49e236033","// Global app data\nvar apiKey = 'ffceec59df88c4336a45c093deedd062';\nvar baseUrl = 'http://api.openweathermap.org/data/2.5/weather?';\nvar baseIconUrl = 'http://openweathermap.org/img/w/';\nvar degSign = '\\u00B0';\nvar tempKelvin; // inital value retrieved from openweather\nvar tempUnit = 'F';\nvar convertTemp = kelvinToFahrenheit;\nvar watchId = 0;\n// App entry point\nfunction main() {\n    // Verify browser support\n    if (!navigator.geolocation) {\n        errorMsg(\"Error: Geolocation not supported by your browser.\");\n        return;\n    }\n    // Add event listeners on position change\n    watchId = navigator.geolocation.watchPosition(getWeather, geoError, geoOptions);\n}\n// watchPosition on error callback\nfunction geoError() {\n    errorMsg(\"Error: Unable to retrieve position.\");\n}\n// watchPosition options \nvar geoOptions = {\n    enableHighAccuracy: false,\n    maximumAge: 0,\n    timeout: 30000\n};\n// Get weather for current location\nfunction getWeather(position) {\n    // Build URL for weather request\n    var lat = position.coords.latitude;\n    var lon = position.coords.longitude;\n    var url = baseUrl + \"lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + apiKey;\n    // Create and issue request for weather data\n    var xhr = new XMLHttpRequest();\n    if (!xhr) {\n        errorMsg('Error: Cannot create XMLHttp instance');\n        return;\n    }\n    xhr.open('GET', url, true);\n    xhr.responseType = 'json';\n    xhr.onreadystatechange = function () {\n        displayWeather(xhr.response);\n    };\n    xhr.send();\n}\n// Response handler\nfunction handleXhrResponse(xhr) {\n    // Check that request is completed\n    if (xhr.readyState != 4) {\n        // do nothing if request is incomplete\n        return;\n    }\n    // Check for null response from server\n    if (xhr.response === null) {\n        errorMsg('Error: no response from server');\n        return;\n    }\n    // Check for error status\n    if (xhr.status != 200) {\n        errorMsg(\"Error: status \" + xhr.status);\n        return;\n    }\n    // If no errors, display weather data\n    displayWeather(xhr.response);\n}\n// Update display of current weather\nfunction displayWeather(response) {\n    if (response === null) {\n        return; // if response is null, do nothing\n    }\n    // Save inital Kelvin temperature for toggling unit conversions\n    tempKelvin = response.main.temp;\n    var city = response.name, // city name\n    country = response.sys.country, // country name         \n    condDesc = response.weather[0].main, // weather description\n    icon = response.weather[0].icon;\n    // Update weather display\n    updateLocation(city, country);\n    updateTemp(convertTemp(tempKelvin));\n    updateCond(condDesc);\n    updateIcon(icon);\n}\nfunction updateLocation(city, country) {\n    document.getElementById('location')\n        .textContent = city + \", \" + country;\n}\nfunction updateTemp(temp) {\n    document.getElementById('temp')\n        .textContent = temp.toString() + \" \" + degSign + \" \" + tempUnit;\n}\nfunction updateCond(condDesc) {\n    document.getElementById('cond')\n        .textContent = condDesc;\n}\nfunction updateIcon(icon) {\n    var elem = document.getElementById('cond-icon');\n    elem.src = \"\" + baseIconUrl + icon + \".png\";\n}\n// Convert temperature in Kelvins to Degrees Fahrenheit\nfunction kelvinToFahrenheit(tempK) {\n    // Tf = Tk x 9/5 - 459.67\n    // Rounds result to one decimal place\n    return Math.round((tempK * 9 / 5 - 459.67) * 10) / 10;\n}\n// Convert temperature in Kelvins to Degrees Celsius\nfunction kelvinToCelsius(tempK) {\n    // Tc = Tk - 273.15\n    // Rounds result to one decimal place\n    return Math.round((tempK - 273.15) * 10) / 10;\n}\n// Toggle between Fahrenheit or Celsius units\nfunction toggleUnits() {\n    if (tempUnit === 'F') {\n        tempUnit = 'C';\n        convertTemp = kelvinToCelsius;\n    }\n    else {\n        tempUnit = 'F';\n        convertTemp = kelvinToFahrenheit;\n    }\n    updateTemp(convertTemp(tempKelvin));\n}\n// Display error message\nfunction errorMsg(msg) {\n    alert(msg);\n}\n// Register event listeners and Define entry\ndocument.getElementById('temp').addEventListener('click', toggleUnits, false);\nwindow.onload = main;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app.ts\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}